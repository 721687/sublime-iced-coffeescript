{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Better CoffeeScript","tagline":"","body":"\r\n\r\n# Jump to Section\r\n\r\n* [Latest Change Log](https://github.com/aponxi/sublime-better-coffeescript/blob/master/changelogs/0.6.md)\r\n* [Installation](#installation)\r\n* [Updating](#updating)\r\n* [Commands/Shortcuts](#commandsshortcuts)\r\n* [Snippets](#snippets)\r\n* [Building](#building)\r\n* [Settings](#settings)\r\n* [Special Thanks](#special-thanks)\r\n\r\n# Overview\r\n\r\n## Description\r\n\r\nCoffeeScript plugin was originally created by Xavura. As I began writing a lot of code in CoffeeScript I felt the need for side-by-side view for compiled CoffeeScript. Since Xavura's repo haven't been updated for over a year, and my sent pull requests were unresponsive I decided to branch out my own version. The biggest change in my branch is the Watch Mode which updates the compiled JavaScript view whenever you modify the CoffeeScript thus enabling you to view your progress side-by-side.\r\n\r\nI use this plugin everyday so whenever I am not developing I am in testing stage. I'll make sure every request or bug will be patched since I'm a frequent user.\r\n\r\n## Contributing\r\n\r\n- Please use [aponxi/issues page](https://github.com/aponxi/sublime-better-coffeescript/issues) to make requests or report bugs.\r\n- It would be best to keep the wiki on [this repository's wiki](https://github.com/aponxi/sublime-better-coffeescript/wiki) as well.\r\n\r\n# Installation\r\n\r\n## via Package Control\r\n\r\n> This is the recommended installation method.\r\n\r\nIf you have Sublime Package Control, you know what to do. If not, well: it's a package manager for Sublime Text 2; it's awesome and you can [read about it here](http://wbond.net/sublime_packages/package_control).\r\n\r\nTo install Package Control, open the Python Console (`ctrl+'` or ``cmd+` ``) and paste the following into it:\r\n\r\n    import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'\r\n\r\nAfter installing the package and restarting the editor:\r\n\r\n* Open the Command Pallete (`ctrl+shift+P` or `cmd+shift+P`).\r\n* Type \"Install Package\" and hit return.\r\n* Type \"sublime-better-coffeescript\" and hit return.\r\n\r\n## via Source Control\r\n\r\n> If you plan to contribute, then you should install via this method. Otherwise it is recommended that you install the package via Package Control, see above.\r\n\r\nSublime stores packages in the following locations:\r\n\r\n\tNix: ~/.config/sublime-text-2/packages\r\n\tMac: ~/Library/Application\\ Support/Sublime\\ Text\\ 2/Packages\r\n\tWin: %APPDATA%\\Sublime Text 2\\Packages\r\n\r\n### As a repository within the packages directory\r\n\r\nOpen a Terminal/Console and run the following commands, replacing `PACKAGE_PATH` with the path corresponding to your OS above.\r\n\r\n\tcd PACKAGE_PATH\r\n\tgit clone https://github.com/aponxi/sublime-better-coffeescript.git \"sublime-better-coffeescript\"\r\n\r\n### As a repository outside of the packages directory\r\n\r\nIf you use Github for Mac/Windows which store repositories in a specific location, or if you just don't want a repository in your packages directory, then instead you can use a link.\r\n\r\nIf you don't yet have the repository, then grab it via your GUI program or via the command line:\r\n\r\n\tcd WHEREVER_YOU_WANT\r\n\tgit clone https://github.com/aponxi/sublime-better-coffeescript.git\r\n\r\nOnce that is done, we will create the link:\r\n\r\n#### Windows:\r\n\r\n\tcd PACKAGE_PATH\r\n\tmklink /D sublime-better-coffeescript ABSOLUTE_PATH_TO_REPOSITORY\r\n\r\n#### Nix/Mac:\r\n\r\n\tcd PACKAGE_PATH\r\n\tln -s ABSOLUTE_PATH_TO_REPOSITORY sublime-better-coffeescript\r\n\r\n#### A note on Package Control\r\n\r\nWhen Package Control tries to update your packages, if you have a repository in your packages directory then it will try to pull down and merge any changes. If you don't want this to happen and would rather handle everything yourself, then you can add the following to your settings (Preferences » Package Settings » Package Control » Settings - User):\r\n\r\n\t\"auto_upgrade_ignore\": [\"sublime-better-coffeescript\"]\r\n\r\n# Updating\r\n\r\nIf you are using Package Control, updating will be automatic and you don't have to worry about it.\r\n\r\nIf using Source Control:\r\n\r\n\tcd PACKAGE_PATH/CoffeeScript\r\n\tgit fetch origin\r\n\tgit merge origin/master\r\n\r\n# Commands/Shortcuts\r\n\r\nYou can access the commands either using the command palette (`ctrl+shift+P` or `cmd+shift+P`) or via shortcuts.\r\n\r\n\talt+shift+t - Run a Cake task\r\n\talt+shift+r - Run some CoffeeScript (puts/print is available for output)\r\n\talt+shift+s - Run a syntax check\r\n\talt+shift+c - Compile a file\r\n\talt+shift+d - Display compiled JavaScript\r\n\talt+shift+l - Display lexer tokens\r\n\talt+shift+n - Display parser nodes\r\n\talt+shift+w - Toggle watch mode\r\n\talt+shift+p - Toggle output panel\r\n\r\n\r\nContext menu has `Compile Output` that compiles the current CoffeeScript and outputs the javascript code that is run, in a panel.\r\n\r\n**Note:** Some of the commands use the Status Bar for output, so you'll probably want to enable it (Tools » Show Status Bar).\r\n\r\n\r\n\r\n# Snippets\r\n\r\n- Use `TAB` to run a snippet after typing the trigger.\r\n- Use `TAB` and `shift+TAB` to cycle forward/backward through fields.\r\n- Use `ESC` to exit snippet mode.\r\n\r\n### Snippet Triggers\r\n\r\n**Comprehension**\r\n\r\n\tArray:  forin\r\n\tObject: forof\r\n\tRange:  fori (inclusive)\r\n\tRange:  forx (exclusive)\r\n\r\n**Statements**\r\n\r\n\tIf:        if\r\n\tElse:      el\r\n\tIf Else:   ifel\r\n\tElse If:   elif\r\n\tSwitch:    swi\r\n\tTernary:   ter\r\n\tTry Catch: try\r\n\tUnless:    unl\r\n\r\n**Classes**\r\n\r\n\tClass - cla\r\n\r\n**Other**\r\n\r\n\tFunction:      -\r\n\tFunction:      = (bound)\r\n\tInterpolation: #\r\n\r\n# Building\r\n\r\n> When using the build system, it is assumed that your `.sublime-project` file lives in your project's base directory (due to limitations with the build system).\r\n\r\nHitting `F7` (Tools » Build) will run the Cake task 'sbuild'.\r\n\r\nIf you're not quite sure what the point of this is then read on.\r\n\r\nLet's say before distributing your project that you would like to combine all of your `.js` files into one and then minify them them using UglifyJS or something.\r\n\r\nThat's what this is for! You would create a `Cakefile` and inside it you would write a task:\r\n\r\n\ttask 'sbuild', 'Prepare project for distribution.', ->\r\n\t\t# ...\r\n\r\n# Settings\r\n\r\nGo to `Preferences > Package Settings > CoffeeScript > Settings - User` to change settings.\r\n\r\n```Javascript\r\n{\r\n\t/*\r\n\t\tThe directory containing your coffee binary. Usually\r\n\t\t/usr/local/bin.\r\n\t*/\r\n\t\"binDir\": \"/usr/local/bin\"\r\n\r\n\t/*\r\n\t\tCompile without the top-level function wrapper (coffee -b).\r\n\t*/\r\n\r\n,\t\"noWrapper\": true\r\n\r\n\t/*\r\n\t\tEnable or disable refresh the compiled Output on Save.\r\n\t\tOnly available for watch mode.\r\n\t*/\r\n,\t\"watchOnSave\": true\r\n\t/*\r\n\t\tEnable refreshing compiled JS when CoffeeScript is modified.\r\n\r\n\t\tPut false to disable\r\n\t\tPut a number of seconds to delay the refresh\r\n\t*/\r\n,\t\"watchOnModified\": 0.5\r\n\t/*\r\n\t\tEnable Compiling on save. It will compile into the same folder.\r\n\t*/\r\n,\t\"compileOnSave\": true\r\n\t/*\r\n\t\tEnable outputting the results of the compiled coffeescript in a panel\r\n\t*/\r\n,\t\"showOutputOnSave\": false\r\n\r\n\r\n\r\n}\r\n```\r\n\r\n# Special Thanks\r\n\r\n* [agibsonsw](https://github.com/agibsonsw) for his help in writing WatchMode\r\n* [Xavura](https://github.com/Xavura) for writing the base of this plugin\r\n","google":""}